test_post( "sym<assign>", <<'CODE', <<'RESULT');
.sub "main"
    $S0 = "hello"
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => \post
            <symtable> => Hash {
                "$S0" => PMC 'POST;Register'  {
                    <name> => "$S0"
                    <type> => "s"
                }
            }
            [0] => PMC 'POST;Op'  {
                <pirop> => "set"
                [0] => PMC 'POST;Value'  {
                    <name> => \post["main"]["$S0"]
                    <type> => \post["main"]["$S0"]
                }
                [1] => PMC 'POST;String'  {
                    <charset> => "ascii"
                    <encoding> => "fixed_8"
                    <type> => "sc"
                    <value> => "hello"
                }
            }
        }
    }
    [0] => \post["main"]
}
RESULT

test_post( "sym<assign> as op", <<'CODE', <<'RESULT');
.sub "main"
    $I0 = err
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => \post
            <symtable> => Hash {
                "$I0" => PMC 'POST;Register'  {
                    <name> => "$I0"
                    <type> => "i"
                }
            }
            [0] => PMC 'POST;Op'  {
                <pirop> => "err"
                [0] => PMC 'POST;Value'  {
                    <name> => \post["main"]["$I0"]
                    <type> => \post["main"]["$I0"]
                }
            }
        }
    }
    [0] => \post["main"]
}
RESULT


test_post( "sym<assign> hiding op", <<'CODE', <<'RESULT');
.sub "main"
    .local int err
    $I0 = err
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => \post
            <symtable> => Hash {
                "$I0" => PMC 'POST;Register'  {
                    <name> => "$I0"
                    <type> => "i"
                },
                "err" => PMC 'POST;Register'  {
                    <declared> => 1
                    <name> => "err"
                    <type> => "i"
                }
            }
            [0] => PMC 'POST;Op'  {
                <pirop> => "set"
                [0] => PMC 'POST;Value'  {
                    <name> => \post["main"]["$I0"]
                    <type> => \post["main"]["$I0"]
                }
                [1] => PMC 'POST;Value'  {
                    <name> => "err"
                }
            }
        }
    }
    [0] => \post["main"]
}
RESULT

test_post( "sym<assign> undeclared register", <<'CODE', <<'RESULT', "fail_like" => "Register 'foo' not predeclared");
.sub "main"
    $I0 = foo
.end
CODE
dummy
RESULT

test_post( "sym<assign> for POST::Value", <<'CODE', <<'RESULT');
.sub "main"
    .local string h
    h = "hello"
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => \post
            <symtable> => Hash {
                "h" => PMC 'POST;Register'  {
                    <declared> => 1
                    <name> => "h"
                    <type> => "s"
                }
            }
            [0] => PMC 'POST;Op'  {
                <pirop> => "set"
                [0] => PMC 'POST;Value'  {
                    <name> => "h"
                }
                [1] => PMC 'POST;String'  {
                    <charset> => "ascii"
                    <encoding> => "fixed_8"
                    <type> => "sc"
                    <value> => "hello"
                }
            }
        }
    }
    [0] => \post["main"]
}
RESULT
# vim: ft=perl
