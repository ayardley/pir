# It's not real "perl"! It's just looks like it.
test_post( "Empty sub", <<'CODE', <<'RESULT');
.sub "main"
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => \post
        }
    }
    [0] => \post["main"]
}
RESULT

test_post( "Simple sub", <<'CODE', <<'RESULT');
.sub "main"
    say "Hello, World"
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => \post
            [0] => PMC 'POST;Op'  {
                <pirop> => "say"
                [0] => PMC 'POST;String'  {
                    <charset> => "ascii"
                    <encoding> => "fixed_8"
                    <type> => "sc"
                    <value> => "Hello, World"
                }
            }
        }
    }
    [0] => \post["main"]
}
RESULT

test_post( "Symtable (params)", <<'CODE', <<'RESULT');
.sub "main"
    .param pmc    a
    .param string b
    .param int    c
    .param num    d
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => \post
            <params> => ResizablePMCArray (size:4) [
                PMC 'POST;Register'  {
                    <declared> => 1
                    <name> => "a"
                    <type> => "p"
                },
                PMC 'POST;Register'  {
                    <declared> => 1
                    <name> => "b"
                    <type> => "s"
                },
                PMC 'POST;Register'  {
                    <declared> => 1
                    <name> => "c"
                    <type> => "i"
                },
                PMC 'POST;Register'  {
                    <declared> => 1
                    <name> => "d"
                    <type> => "n"
                }
            ]
            <symtable> => Hash {
                "a" => \post["main"][0],
                "b" => \post["main"][1],
                "c" => \post["main"][2],
                "d" => \post["main"][3]
            }
        }
    }
    [0] => \post["main"]
}
RESULT

test_post( "Undeclared variable", <<'CODE', <<'RESULT', "fail_like" => "Register 'foo' not predeclared");
.sub "main"
    say foo
.end
CODE
dummy
RESULT

test_post( "Symtable (params usage)", <<'CODE', <<'RESULT');
.sub "main"
    .param pmc    a
    say a
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => \post
            <params> => ResizablePMCArray (size:1) [
                PMC 'POST;Register'  {
                    <declared> => 1
                    <name> => "a"
                    <type> => "p"
                }
            ]
            <symtable> => Hash {
                "a" => \post["main"][0]
            }
            [0] => PMC 'POST;Op'  {
                <pirop> => "say"
                [0] => PMC 'POST;Value'  {
                    <name> => "a"
                }
            }
        }
    }
    [0] => \post["main"]
}
RESULT

test_post( "Symtable (.local usage)", <<'CODE', <<'RESULT');
.sub "main"
    .local pmc    a
    say a
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => \post
            <symtable> => Hash {
                "a" => PMC 'POST;Register'  {
                    <declared> => 1
                    <name> => "a"
                    <type> => "p"
                }
            }
            [0] => PMC 'POST;Op'  {
                <pirop> => "say"
                [0] => PMC 'POST;Value'  {
                    <name> => "a"
                }
            }
        }
    }
    [0] => \post["main"]
}
RESULT


test_post( "Redeclaration of variable", <<'CODE', <<'RESULT', "fail_like" => "Redeclaration of");
.sub "main"
    .local pmc foo
    .local pmc foo
    say foo
.end
CODE
dummy
RESULT


test_post( "Choosing :main sub", <<'CODE', <<'RESULT');
.sub "hello"
    .param string greeting
    say greeting
.end

.sub "main" :main
    "hello"("Hello, World")
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "hello" => PMC 'POST;Sub'  {
            <name> => "hello"
            <params> => ResizablePMCArray (size:1) [
                PMC 'POST;Register'  {
                    <declared> => 1
                    <name> => "greeting"
                    <type> => "s"
                }
            ]
            <symtable> => Hash {
                "greeting" => \post["hello"][0]
            }
            [0] => PMC 'POST;Op'  {
                <pirop> => "say"
                [0] => PMC 'POST;Value'  {
                    <name> => "greeting"
                }
            }
        },
        "main" => PMC 'POST;Sub'  {
            <main> => 1
            <name> => \post
            <symtable> => Hash {
                "!SUB" => PMC 'POST;Register'  {
                    <name> => "!SUB"
                    <type> => "p"
                }
            }
            [0] => PMC 'POST;Call'  {
                <calltype> => "call"
                <name> => PMC 'POST;String'  {
                    <charset> => "ascii"
                    <encoding> => "fixed_8"
                    <type> => "sc"
                    <value> => "hello"
                }
                <params> => ResizablePMCArray (size:1) [
                    PMC 'POST;String'  {
                        <charset> => "ascii"
                        <encoding> => "fixed_8"
                        <type> => "sc"
                        <value> => "Hello, World"
                    }
                ]
            }
        }
    }
    [0] => \post["hello"]
    [1] => \post["main"]
}
RESULT


# vim: ft=perl6
