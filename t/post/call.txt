test_post( "Empty call", <<'CODE', <<'RESULT');
.sub "main"
    "foo"()
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => \post
            <symtable> => Hash {
                "!SUB" => PMC 'POST;Register'  {
                    <name> => "!SUB"
                    <type> => "p"
                }
            }
            [0] => PMC 'POST;Call'  {
                <calltype> => "call"
                <name> => PMC 'POST;String'  {
                    <charset> => "ascii"
                    <encoding> => "binary"
                    <type> => "sc"
                    <value> => "foo"
                }
            }
        }
    }
    [0] => \post["main"]
}
RESULT

test_post( "Simple params", <<'CODE', <<'RESULT');
.sub "main"
    "foo"("answer", 42)
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => "main"
            <symtable> => Hash {
                "!SUB" => PMC 'POST;Register'  {
                    <name> => "!SUB"
                    <type> => "p"
                }
            }
            [0] => PMC 'POST;Call'  {
                <calltype> => "call"
                <name> => PMC 'POST;String'  {
                    <charset> => "ascii"
                    <encoding> => "binary"
                    <type> => "sc"
                    <value> => "foo"
                }
                <params> => ResizablePMCArray (size:2) [
                    PMC 'POST;String'  {
                        <charset> => "ascii"
                        <encoding> => "binary"
                        <type> => "sc"
                        <value> => "answer"
                    },
                    PMC 'POST;Constant'  {
                        <type> => "ic"
                        <value> => "42"
                    }
                ]
            }
        }
    }
    [0] => \post["main"]
}
RESULT

test_post( "Simple returns", <<'CODE', <<'RESULT');
.sub "main"
    $P0 = "foo"()
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => "main"
            <symtable> => Hash {
                "!SUB" => PMC 'POST;Register'  {
                    <name> => "!SUB"
                    <type> => "p"
                },
                "$P0" => PMC 'POST;Register'  {
                    <name> => "$P0"
                    <type> => "p"
                }
            }
            [0] => PMC 'POST;Call'  {
                <calltype> => "call"
                <name> => PMC 'POST;String'  {
                    <charset> => "ascii"
                    <encoding> => "binary"
                    <type> => "sc"
                    <value> => "foo"
                }
                <results> => ResizablePMCArray (size:1) [
                    PMC 'POST;Value'  {
                        <name> => \post["main"]["$P0"]
                        <type> => \post["main"]["$P0"]
                    }
                ]
            }
        }
    }
    [0] => \post["main"]
}
RESULT


test_post( "Many returns", <<'CODE', <<'RESULT');
.sub "main"
    ($P0, $S0) = "foo"()
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => "main"
            <symtable> => Hash {
                "!SUB" => PMC 'POST;Register'  {
                    <name> => "!SUB"
                    <type> => "p"
                },
                "$P0" => PMC 'POST;Register'  {
                    <name> => "$P0"
                    <type> => "p"
                },
                "$S0" => PMC 'POST;Register'  {
                    <name> => "$S0"
                    <type> => "s"
                }
            }
            [0] => PMC 'POST;Call'  {
                <calltype> => "call"
                <name> => PMC 'POST;String'  {
                    <charset> => "ascii"
                    <encoding> => "binary"
                    <type> => "sc"
                    <value> => "foo"
                }
                <results> => ResizablePMCArray (size:2) [
                    PMC 'POST;Value'  {
                        <name> => \post["main"]["$P0"]
                        <type> => \post["main"]["$P0"]
                    },
                    PMC 'POST;Value'  {
                        <name> => \post["main"]["$S0"]
                        <type> => \post["main"]["$S0"]
                    }
                ]
            }
        }
    }
    [0] => \post["main"]
}
RESULT

test_post( "Register call", <<'CODE', <<'RESULT');
.sub "main"
    $P0 = $P0()
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => "main"
            <symtable> => Hash {
                "$P0" => PMC 'POST;Register'  {
                    <name> => "$P0"
                    <type> => "p"
                }
            }
            [0] => PMC 'POST;Call'  {
                <calltype> => "call"
                <name> => PMC 'POST;Value'  {
                    <name> => \post["main"]["$P0"]
                    <type> => \post["main"]["$P0"]
                }
                <results> => ResizablePMCArray (size:1) [
                    PMC 'POST;Value'  {
                        <name> => "$P0"
                        <type> => "p"
                    }
                ]
            }
        }
    }
    [0] => \post["main"]
}
RESULT


test_post( "Method call direct", <<'CODE', <<'RESULT');
.sub "main"
    $P0."foo"()
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => "main"
            <symtable> => Hash {
                "$P0" => PMC 'POST;Register'  {
                    <name> => "$P0"
                    <type> => "p"
                }
            }
            [0] => PMC 'POST;Call'  {
                <calltype> => "call"
                <invocant> => PMC 'POST;Value'  {
                    <name> => \post["main"]["$P0"]
                    <type> => \post["main"]["$P0"]
                }
                <name> => PMC 'POST;String'  {
                    <charset> => "ascii"
                    <encoding> => "binary"
                    <type> => "sc"
                    <value> => "foo"
                }
            }
        }
    }
    [0] => \post["main"]
}
RESULT

test_post( "Method call in-direct", <<'CODE', <<'RESULT');
.sub "main"
    $P0.$P0()
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => "main"
            <symtable> => Hash {
                "$P0" => PMC 'POST;Register'  {
                    <name> => "$P0"
                    <type> => "p"
                }
            }
            [0] => PMC 'POST;Call'  {
                <calltype> => "call"
                <invocant> => PMC 'POST;Value'  {
                    <name> => "$P0"
                    <type> => "p"
                }
                <name> => PMC 'POST;Value'  {
                    <name> => \post["main"]["$P0"]
                    <type> => \post["main"]["$P0"]
                }
            }
        }
    }
    [0] => \post["main"]
}
RESULT

test_post( "Tailcall", <<'CODE', <<'RESULT');
.sub "main"
    .tailcall main()
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => "main"
            <symtable> => Hash {
                "!SUB" => PMC 'POST;Register'  {
                    <name> => "!SUB"
                    <type> => "p"
                }
            }
            [0] => PMC 'POST;Call'  {
                <calltype> => "tailcall"
                <name> => PMC 'POST;String'  {
                    <charset> => "ascii"
                    <encoding> => "binary"
                    <type> => "sc"
                    <value> => "main"
                }
            }
        }
    }
    [0] => \post["main"]
}
RESULT


test_post( "Simple .return()", <<'CODE', <<'RESULT');
.sub "main"
    .return ("answer", 42)
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => "main"
            [0] => PMC 'POST;Call'  {
                <calltype> => "return"
                <params> => ResizablePMCArray (size:2) [
                    PMC 'POST;String'  {
                        <charset> => "ascii"
                        <encoding> => "binary"
                        <type> => "sc"
                        <value> => "answer"
                    },
                    PMC 'POST;Constant'  {
                        <type> => "ic"
                        <value> => "42"
                    }
                ]
            }
        }
    }
    [0] => \post["main"]
}
RESULT


test_post( "Simple .yield()", <<'CODE', <<'RESULT');
.sub "main"
    .yield ("answer", 42)
.end
CODE
"post" => PMC 'POST;File'  {
    <main_sub> => "main"
    <subs> => Hash {
        "main" => PMC 'POST;Sub'  {
            <name> => "main"
            [0] => PMC 'POST;Call'  {
                <calltype> => "yield"
                <params> => ResizablePMCArray (size:2) [
                    PMC 'POST;String'  {
                        <charset> => "ascii"
                        <encoding> => "binary"
                        <type> => "sc"
                        <value> => "answer"
                    },
                    PMC 'POST;Constant'  {
                        <type> => "ic"
                        <value> => "42"
                    }
                ]
            }
        }
    }
    [0] => \post["main"]
}
RESULT

# vim: ft=perl
