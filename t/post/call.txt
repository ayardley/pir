test_post( "Empty call", <<'CODE', <<'RESULT');
.sub "main"
    "foo"()
.end
CODE
"post" => PMC 'POST;Node'  {
    <main_sub> => "main"
    [0] => PMC 'POST;Sub'  {
        <name> => \post
        <symtable> => Hash {
            "!SUB" => PMC 'POST;Register'  {
                <name> => "!SUB"
                <type> => "p"
            }
        }
        [0] => PMC 'POST;Call'  {
            <calltype> => "call"
            <name> => PMC 'POST;Constant'  {
                <type> => "sc"
                <value> => "foo"
            }
        }
    }
}
RESULT

test_post( "Simple params", <<'CODE', <<'RESULT');
.sub "main"
    "foo"("answer", 42)
.end
CODE
"post" => PMC 'POST;Node'  {
    <main_sub> => "main"
    [0] => PMC 'POST;Sub'  {
        <name> => "main"
        <symtable> => Hash {
            "!SUB" => PMC 'POST;Register'  {
                <name> => "!SUB"
                <type> => "p"
            }
        }
        [0] => PMC 'POST;Call'  {
            <calltype> => "call"
            <name> => PMC 'POST;Constant'  {
                <type> => "sc"
                <value> => "foo"
            }
            <params> => ResizablePMCArray (size:2) [
                PMC 'POST;Constant'  {
                    <type> => "sc"
                    <value> => "answer"
                },
                PMC 'POST;Constant'  {
                    <type> => "ic"
                    <value> => "42"
                }
            ]
        }
    }
}
RESULT

test_post( "Undeclared parameter", <<'CODE', <<'RESULT', "fail_like" => "Register 'foo' not predeclared");
.sub "main"
    "say"(foo)
.end
CODE
dummy
RESULT

test_post( "Simple returns", <<'CODE', <<'RESULT');
.sub "main"
    $P0 = "foo"()
.end
CODE
"post" => PMC 'POST;Node'  {
    <main_sub> => "main"
    [0] => PMC 'POST;Sub'  {
        <name> => "main"
        <symtable> => Hash {
            "!SUB" => PMC 'POST;Register'  {
                <name> => "!SUB"
                <type> => "p"
            },
            "$P0" => PMC 'POST;Register'  {
                <name> => "$P0"
                <type> => "p"
            }
        }
        [0] => PMC 'POST;Call'  {
            <calltype> => "call"
            <name> => PMC 'POST;Constant'  {
                <type> => "sc"
                <value> => "foo"
            }
            <results> => ResizablePMCArray (size:1) [
                PMC 'POST;Value'  {
                    <name> => \post["$P0"]
                    <type> => \post["$P0"]
                }
            ]
        }
    }
}
RESULT

test_post( "Undeclared simple returns", <<'CODE', <<'RESULT', "fail_like" => "Register 'foo' not predeclared");
.sub "main"
    foo = "say"()
.end
CODE
dummy
RESULT


test_post( "Many returns", <<'CODE', <<'RESULT');
.sub "main"
    ($P0, $S0) = "foo"()
.end
CODE
"post" => PMC 'POST;Node'  {
    <main_sub> => "main"
    [0] => PMC 'POST;Sub'  {
        <name> => "main"
        <symtable> => Hash {
            "!SUB" => PMC 'POST;Register'  {
                <name> => "!SUB"
                <type> => "p"
            },
            "$P0" => PMC 'POST;Register'  {
                <name> => "$P0"
                <type> => "p"
            },
            "$S0" => PMC 'POST;Register'  {
                <name> => "$S0"
                <type> => "s"
            }
        }
        [0] => PMC 'POST;Call'  {
            <calltype> => "call"
            <name> => PMC 'POST;Constant'  {
                <type> => "sc"
                <value> => "foo"
            }
            <results> => ResizablePMCArray (size:2) [
                PMC 'POST;Value'  {
                    <name> => \post["$P0"]
                    <type> => \post["$P0"]
                },
                PMC 'POST;Value'  {
                    <name> => \post["$S0"]
                    <type> => \post["$S0"]
                }
            ]
        }
    }
}
RESULT

test_post( "Undeclared many returns", <<'CODE', <<'RESULT', "fail_like" => "Register 'foo' not predeclared");
.sub "main"
    (foo) = "say"()
.end
CODE
dummy
RESULT

test_post( "Register call", <<'CODE', <<'RESULT');
.sub "main"
    $P0 = $P0()
.end
CODE
"post" => PMC 'POST;Node'  {
    <main_sub> => "main"
    [0] => PMC 'POST;Sub'  {
        <name> => "main"
        <symtable> => Hash {
            "$P0" => PMC 'POST;Register'  {
                <name> => "$P0"
                <type> => "p"
            }
        }
        [0] => PMC 'POST;Call'  {
            <calltype> => "call"
            <name> => PMC 'POST;Value'  {
                <name> => \post["$P0"]
                <type> => \post["$P0"]
            }
            <results> => ResizablePMCArray (size:1) [
                PMC 'POST;Value'  {
                    <name> => "$P0"
                    <type> => "p"
                }
            ]
        }
    }
}
RESULT


test_post( "Method call direct", <<'CODE', <<'RESULT');
.sub "main"
    $P0."foo"()
.end
CODE
"post" => PMC 'POST;Node'  {
    <main_sub> => "main"
    [0] => PMC 'POST;Sub'  {
        <name> => "main"
        <symtable> => Hash {
            "$P0" => PMC 'POST;Register'  {
                <name> => "$P0"
                <type> => "p"
            }
        }
        [0] => PMC 'POST;Call'  {
            <calltype> => "call"
            <invocant> => PMC 'POST;Value'  {
                <name> => \post["$P0"]
                <type> => \post["$P0"]
            }
            <name> => PMC 'POST;Constant'  {
                <type> => "sc"
                <value> => "foo"
            }
        }
    }
}
RESULT

test_post( "Method call in-direct", <<'CODE', <<'RESULT');
.sub "main"
    $P0.$P0()
.end
CODE
"post" => PMC 'POST;Node'  {
    <main_sub> => "main"
    [0] => PMC 'POST;Sub'  {
        <name> => "main"
        <symtable> => Hash {
            "$P0" => PMC 'POST;Register'  {
                <name> => "$P0"
                <type> => "p"
            }
        }
        [0] => PMC 'POST;Call'  {
            <calltype> => "call"
            <invocant> => PMC 'POST;Value'  {
                <name> => "$P0"
                <type> => "p"
            }
            <name> => PMC 'POST;Value'  {
                <name> => \post["$P0"]
                <type> => \post["$P0"]
            }
        }
    }
}
RESULT

test_post( "Tailcall", <<'CODE', <<'RESULT');
.sub "main"
    .tailcall main()
.end
CODE
"post" => PMC 'POST;Node'  {
    <main_sub> => "main"
    [0] => PMC 'POST;Sub'  {
        <name> => "main"
        <symtable> => Hash {
            "!SUB" => PMC 'POST;Register'  {
                <name> => "!SUB"
                <type> => "p"
            }
        }
        [0] => PMC 'POST;Call'  {
            <calltype> => "tailcall"
            <name> => PMC 'POST;Constant'  {
                <type> => "sc"
                <value> => "main"
            }
        }
    }
}
RESULT


test_post( "Simple .return()", <<'CODE', <<'RESULT');
.sub "main"
    .return ("answer", 42)
.end
CODE
"post" => PMC 'POST;Node'  {
    <main_sub> => "main"
    [0] => PMC 'POST;Sub'  {
        <name> => "main"
        [0] => PMC 'POST;Call'  {
            <calltype> => "return"
            <params> => ResizablePMCArray (size:2) [
                PMC 'POST;Constant'  {
                    <type> => "sc"
                    <value> => "answer"
                },
                PMC 'POST;Constant'  {
                    <type> => "ic"
                    <value> => "42"
                }
            ]
        }
    }
}
RESULT


test_post( "Simple .yield()", <<'CODE', <<'RESULT');
.sub "main"
    .yield ("answer", 42)
.end
CODE
"post" => PMC 'POST;Node'  {
    <main_sub> => "main"
    [0] => PMC 'POST;Sub'  {
        <name> => "main"
        [0] => PMC 'POST;Call'  {
            <calltype> => "yield"
            <params> => ResizablePMCArray (size:2) [
                PMC 'POST;Constant'  {
                    <type> => "sc"
                    <value> => "answer"
                },
                PMC 'POST;Constant'  {
                    <type> => "ic"
                    <value> => "42"
                }
            ]
        }
    }
}
RESULT

test_post( "Wrong variable type for dynamic call", <<'CODE', <<'RESULT', "fail_like" => "Sub '$S0' isn't a PMC");
.sub "main"
    $S0()
.end
CODE
dummy
RESULT


# vim: ft=perl
