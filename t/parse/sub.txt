# TEST basic sub
.sub main
.end

# TEST main flag
.sub main :main
.end

# TEST load flag
.sub main :load
.end

# TEST init flag
.sub main :init
.end

# TEST immediate flag
.sub main :immediate
.end

# TEST lex flag
.sub main :lex
.end

# TEST anon flag
.sub main :anon
.end

# TEST outer flag

.sub outer_sub
.end

.sub bar :outer(outer_sub)
.end

.sub main :outer('outer_sub')
.end

    
# TEST subid flag

.sub bar :subid('subid2')
.end


# TEST nsentry flag

.sub bar :nsentry('nsentry2')
.end


# TEST method flag

.sub bar :method
.end



# TEST multi flag 1
.sub main :multi(int)
.end

# TEST multi flag 2
.sub main :multi(int, num)
.end

# TEST multi flag 3
.sub main :multi(_, int, num, string, pmc)
.end

# TEST multi flag 4
.sub main :multi(int, _, num, string, _)
.end

# TEST multi flag 5
.sub main :multi(_)
.end

# TEST multi flag 6
.sub main :multi(int, int, int, int)
.end

# TEST multi flag 7
.sub main :multi(_, _, _, _, _, _)
.end

# TEST multi flag 8
.sub main :multi('Integer', 'Foo')
.end

# TEST vtable flag

.sub bar :vtable
.end


# TEST vtable flag with explicit name
.sub '' :vtable('get_integer')
.end

# TEST combine flags without commas
.sub main :main :load :immediate :init
.end

# TEST parameters
.sub main
	.param pmc pargs
	.param int iarg
	.param string sarg
	.param num narg
.end

# TEST parameter flags
.sub main
	.param pmc args1 :slurpy
	.param pmc args2 :named
	.param pmc args3 :optional
	.param int arg3  :opt_flag
.end

# TEST sub
.sub x
	.param int i                    # positional parameter
  .param pmc argv :slurpy         # slurpy array
  .param pmc value :named('key')  # named parameter
  .param int x :optional          # optional parameter
  .param int has_x :opt_flag          # flag 0/1 x was passed
  .param pmc kw :slurpy :named    # slurpy hash
.end



