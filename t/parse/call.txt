# TEST long sub invocation 
.sub main :main
    .local int x, y, z
    .begin_call
    .set_arg 1
    .set_arg 2
    .set_arg 3
    .call foo
    .local int a, b, c
    .get_result a
    .get_result b
    .get_result c
    .end_call
.end

.sub foo
    .begin_return
    .set_return 4
    .set_return 5
    .set_return 6
    .end_return
.end


# TEST long sub invocation 2

.sub main :main
    .begin_call
    .call foo
    .end_call
.end

.sub foo
    .begin_return
    .end_return
.end

# TEST short sub invocation
.sub main :main
    .local int x, y, z
    (x, y, z) = foo(1, 2, 3)

    foo(1,2,3)
.end

.sub foo
    .return(4, 5, 6)
.end

# TEST short yield
.sub main :main
    .yield(1,2,3)
    .yield()
.end


# TEST long yield
.sub main :main
    .begin_yield
    .set_yield 1
    .set_yield 2
    .set_yield 3
    .end_yield
.end

# TEST nci call
.sub main :main
    .local pmc x
    .begin_call
    .nci_call x
    .end_call
.end

# TEST short method call

.sub main :main
    .local pmc f
    f = new ['Foo']
    f."foo"()
.end

.namespace ['Foo']
.sub foo
.end


# TEST long method call

.sub main :main
    .local pmc x
    .begin_call
    .invocant obj
    .meth_call meth
    .end_call
.end

.sub foo
    .local pmc x
    .begin_call
    .invocant obj
    .meth_call 'meth'
    .end_call
.end

# TEST args flags 1
.sub main
    foo(x :flat)
.end

# TEST args flags 2
.sub main :main
    .local pmc x, y
    foo(x, 'y' => y)
.end

# TEST args flags 3
.sub main :main
    .local pmc x, y
    foo(x, y :named('y'))
.end

# TEST args flags 4
.sub main :main
    .local pmc x, y
    foo(x :flat :named)
.end

# TEST args flags 5
.sub main :main
    .local pmc x, y
    foo(x :flat :named)
.end

# TEST args flags 6
.sub main :main
    .local pmc x, y
    foo(a, b, c :flat, 'x' => 3, 'y' => 4, z :flat, bang :named('z'))
.end

# TEST result emtpy
.sub main :main
    .local pmc x, y
    () = foo()
.end

# TEST result flags 1
.sub main :main
    .local pmc x, y
    (i, j) = foo()
.end

# TEST result flags 2
.sub main :main
    .local pmc x, y
    ( j :optional ) = foo()
.end

# TEST result flags 3
.sub main :main
    .local pmc x, y
    ( ar :slurpy ) = foo()
.end

# TEST result flags 4
.sub main :main
    .local pmc x, y
    ( value :named('key') ) = foo()
.end

# TEST returns 1
.sub foo
    .return ( ar :flat )
.end

# TEST returns 2
.sub foo
    .return ( value :named('key') )
.end

# TEST returns 3
.sub foo
    .return (i, ar :flat, value :named('key') )
.end


# TEST short sub call with flags

# the sub body is taken from PDD03
.sub main :main
    .local pmc x, y
    foo(x :flat)
    foo(x, 'y' => y)
    foo(x, y :named('y'))
    foo(x :flat :named)
    foo(a, b, c :flat, 'x' => 3, 'y' => 4, z :flat :named)

    x = foo()                       # single result
    (i, j :optional, ar :slurpy, value :named('key') ) = foo()
.end

.sub foo
    .return (i, ar :flat, value :named('key') )
.end

.sub bar
    () = baz()
.end

# vim: ft=pir
