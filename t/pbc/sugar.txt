# It's not real "perl"! It's just looks like it.

test_post( "sym<goto>", <<'CODE', <<'RESULT');
.sub "main"
    goto label
    say "not "
  label:
    say "ok"
.end
CODE
ok
RESULT

test_post( "sym<if>", <<'CODE', <<'RESULT');
.sub "main"
    $I0 = 1
    if $I0 goto label
    say "not "
  label:
    say "ok"
.end
CODE
ok
RESULT

test_post( "sym<unless>", <<'CODE', <<'RESULT');
.sub "main"
    $I0 = 0
    unless $I0 goto label
    say "not "
  label:
    say "ok"
.end
CODE
ok
RESULT

test_post( "sym<if_null>", <<'CODE', <<'RESULT');
.sub "main"
    if null $P0 goto label
    say "not "
  label:
    say "ok"
.end
CODE
ok
RESULT

test_post( "sym<unless_null>", <<'CODE', <<'RESULT');
.sub "main"
    new $P0, 'Integer'
    $P0 = 1
    unless null $P0 goto label
    say "not "
  label:
    say "ok"
.end
CODE
ok
RESULT

test_post( "sym<op_assign>", <<'CODE', <<'RESULT');
.sub "main"
    $P0 = new 'Integer'
    $P0 = 42
    say $P0
.end
CODE
42
RESULT

test_post( "sym<if_op>", <<'CODE', <<'RESULT');
.sub "main"
    $I0 = 42
    if 42 == $I0 goto label
    say 'broken'
  label:
    say 'ok'
.end
CODE
ok
RESULT

test_post( "sym<unless_op>", <<'CODE', <<'RESULT');
.sub "main"
    $I0 = 42
    unless 4 == $I0 goto label
    say 'broken'
  label:
    say 'ok'
.end
CODE
ok
RESULT

test_post( "sym<unary> - not", <<'CODE', <<'RESULT');
.sub "main"
    $I0 = 0
    $I1 = ! $I0
    if $I1 goto label
    say 'broken'
  label:
    say 'ok'
.end
CODE
ok
RESULT

test_post( "sym<unary> - negate", <<'CODE', <<'RESULT');
.sub "main"
    $I0 = 128
    $I1 = -$I0
    if $I1 == -128 goto label
    say 'broken'
  label:
    say 'ok'
.end
CODE
ok
RESULT


test_post( "sym<binary_math>", <<'CODE', <<'RESULT');
.sub "main"
    $I0 = 128
    $I1 = $I0 + 128
    print 'add '
    if $I1 == 256 goto label1
    say 'broken'
  label1:
    say 'ok'

    $I0 = 1
    $I1 = $I0 << 3
    print 'shl '
    if $I1 == 8 goto label2
    say 'broken'
  label2:
    say 'ok'

    $I0 = 128
    $I1 = $I0 && 0
    print 'logical and '
    if $I1 == 0 goto label3
    say 'broken'
  label3:
    say 'ok'

    $I0 = 128
    $I1 = $I0 % 32
    print 'mod '
    if $I1 == 0 goto label4
    say 'broken'
  label4:
    say 'ok'

    $I0 = 127
    $I1 = $I0 & 5
    print 'binary and '
    if $I1 == 5 goto label5
    say 'broken'
  label5:
    say 'ok'
.end
CODE
add ok
shl ok
logical and ok
mod ok
binary and ok
RESULT

# vim: ft=perl
